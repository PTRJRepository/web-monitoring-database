<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitoring Tunjangan Beras</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2196F3;
            --warning-color: #FFA726;
            --error-color: #EF5350;
            --success-color: #66BB6A;
        }

        body {
            background-color: #f5f5f5;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .warning-row { 
            background-color: #fff3e0 !important; 
            border-left: 4px solid var(--warning-color) !important;
        }
        
        .error-row { 
            background-color: #ffebee !important; 
            border-left: 4px solid var(--error-color) !important;
        }

        .refresh-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .refresh-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .last-check {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 1000;
            padding: 10px 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .config-section {
            background-color: white;
            padding: 25px;
            margin-bottom: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

        .config-section:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .nav-tabs {
            margin-bottom: 25px;
            border-bottom: 2px solid #dee2e6;
        }

        .nav-tabs .nav-link {
            border: none;
            color: #666;
            padding: 12px 20px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .nav-tabs .nav-link.active {
            color: var(--primary-color);
            border-bottom: 3px solid var(--primary-color);
        }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .table {
            margin-bottom: 0;
        }

        .table thead th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            color: #444;
        }

        .stats-card {
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            color: white;
            transition: all 0.3s ease;
        }

        .stats-card:hover {
            transform: translateY(-2px);
        }

        .stats-card .card-title {
            font-size: 0.9rem;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .stats-card .card-text {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .form-control, .form-select {
            border-radius: 8px;
            padding: 10px 15px;
            border: 1px solid #dee2e6;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(33, 150, 243, 0.1);
        }

        .btn {
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border: none;
        }

        .btn-primary:hover {
            background-color: #1976D2;
            transform: translateY(-1px);
        }

        .monitoring-stats {
            background-color: white;
            border-radius: 12px;
            padding: 20px;
            margin-top: 25px;
        }

        .monitoring-stats h4 {
            color: #444;
            font-size: 1.1rem;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .table-responsive {
            border-radius: 12px;
            background: white;
            padding: 15px;
        }

        .dataTables_wrapper .dataTables_filter input {
            border-radius: 8px;
            padding: 6px 12px;
            border: 1px solid #dee2e6;
        }

        .dataTables_wrapper .dataTables_length select {
            border-radius: 8px;
            padding: 6px 28px 6px 12px;
            border: 1px solid #dee2e6;
        }

        /* Loading spinner */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Toast notification */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin-bottom: 10px;
            min-width: 250px;
        }

        .toast-header {
            border-radius: 8px 8px 0 0;
            padding: 12px 15px;
        }

        .toast-body {
            padding: 12px 15px;
        }

        /* Loading overlay styles */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }

        .loading-text {
            font-size: 1.2rem;
            color: #333;
            text-align: center;
            max-width: 80%;
        }

        .loading-details {
            margin-top: 15px;
            padding: 10px 20px;
            background: #f8f9fa;
            border-radius: 8px;
            font-size: 0.9rem;
            color: #666;
        }

        .selected-row {
            background-color: #E3F2FD !important;
            color: #0D47A1 !important;
            border-left: 8px solid #1976D2 !important;
            font-weight: 700;
            box-shadow: 0 6px 16px rgba(13, 71, 161, 0.4);
            transform: scale(1.02);
            transition: all 0.3s ease;
            position: relative;
            z-index: 100;
        }

        .selected-row:hover {
            background-color: #BBDEFB !important;
            transform: scale(1.02) translateY(-2px);
            box-shadow: 0 8px 20px rgba(13, 71, 161, 0.5);
        }

        .selected-row td {
            color: #0D47A1 !important;
            font-weight: 700;
        }

        .warning-row.selected-row {
            background-color: #FFF3E0 !important;
            color: #E65100 !important;
            border-left: 8px solid #FB8C00 !important;
            box-shadow: 0 6px 16px rgba(230, 81, 0, 0.4);
        }

        .warning-row.selected-row td {
            color: #E65100 !important;
            font-weight: 700;
        }

        .error-row.selected-row {
            background-color: #FFEBEE !important;
            color: #C62828 !important;
            border-left: 8px solid #E53935 !important;
            box-shadow: 0 6px 16px rgba(198, 40, 40, 0.4);
        }

        .error-row.selected-row td {
            color: #C62828 !important;
            font-weight: 700;
        }

        .selected-row td::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                to right,
                rgba(255,255,255,0) 0%,
                rgba(255,255,255,0.5) 50%,
                rgba(255,255,255,0) 100%
            );
            transform: translateX(-100%);
            animation: shimmer 2s infinite;
        }

        @keyframes selectedRowPulse {
            0% { box-shadow: 0 6px 16px rgba(13, 71, 161, 0.2); }
            50% { box-shadow: 0 8px 24px rgba(13, 71, 161, 0.3); }
            100% { box-shadow: 0 6px 16px rgba(13, 71, 161, 0.2); }
        }

        .selected-row {
            animation: selectedRowPulse 2s infinite;
        }

        .selected-row td {
            position: relative;
            overflow: hidden;
        }

        @keyframes shimmer {
            100% { transform: translateX(100%); }
        }
    </style>
</head>
<body>
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
        <div class="loading-text">
            Menghubungkan ke Database...
            <div class="loading-details">
                <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">dbo.Incorrect_Input_Jatah_Beras_Based_Employee_Child_Count_Ages</span></p>
            </div>
            <div id="connectionError" class="alert alert-danger mt-3" style="display: none;">
                <strong><i class="fas fa-exclamation-triangle me-2"></i>Error Koneksi:</strong>
                <span id="errorMessage">Tidak dapat terhubung ke database</span>
                <div class="mt-2">
                    <button id="retryConnection" class="btn btn-sm btn-danger">
                        <i class="fas fa-sync me-1"></i> Coba Lagi
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast container for notifications -->
    <div class="toast-container position-fixed top-0 end-0 p-3"></div>

    <div class="container-fluid py-4">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="monitoring-tab" data-bs-toggle="tab" data-bs-target="#monitoring" type="button" role="tab">
                    <i class="fas fa-chart-line me-2"></i>Monitoring Data
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="config-tab" data-bs-toggle="tab" data-bs-target="#config" type="button" role="tab">
                    <i class="fas fa-cog me-2"></i>Konfigurasi
                </button>
            </li>
        </ul>

        <div class="tab-content" id="myTabContent">
            <!-- Tab Monitoring -->
            <div class="tab-pane fade show active" id="monitoring" role="tabpanel">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3">Monitoring Data</h1>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary" id="toggleColumns">
                            <i class="fas fa-columns me-2"></i>Toggle Columns
                        </button>
                        <button class="btn btn-primary" id="exportData">
                            <i class="fas fa-download me-2"></i>Export Data
                        </button>
                    </div>
                </div>

                <!-- Data Type Tabs -->
                <ul class="nav nav-pills mb-4" id="dataTypeTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="tunjangan-tab" data-bs-toggle="pill" data-bs-target="#tunjangan-data" type="button" role="tab">
                            <i class="fas fa-money-bill-wave me-2"></i>Tunjangan Beras
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="bpjs-tab" data-bs-toggle="pill" data-bs-target="#bpjs-data" type="button" role="tab">
                            <i class="fas fa-hospital-user me-2"></i>BPJS Belum Lengkap
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="gwscanner-tab" data-bs-toggle="pill" data-bs-target="#gwscanner-data" type="button" role="tab">
                            <i class="fas fa-barcode me-2"></i>Duplikat GWScanner
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="ffbworker-tab" data-bs-toggle="pill" data-bs-target="#ffbworker-data" type="button" role="tab">
                            <i class="fas fa-user-hard-hat me-2"></i>Non-Pemanen dengan Ripe
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="history-tab" data-bs-toggle="pill" data-bs-target="#history-data" type="button" role="tab">
                            <i class="fas fa-history me-2"></i>History Query
                        </button>
                    </li>
                </ul>

                <!-- Stats Cards -->
                <div class="row mb-4" id="tunjangan-stats">
                    <div class="col-md-3">
                        <div class="stats-card bg-info">
                            <h5 class="card-title"><i class="fas fa-database me-2"></i>Total Data</h5>
                            <p class="card-text" id="totalData">0</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card bg-warning text-dark">
                            <h5 class="card-title"><i class="fas fa-plus-circle me-2"></i>Data Baru</h5>
                            <p class="card-text" id="newData">0</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card bg-danger">
                            <h5 class="card-title"><i class="fas fa-exclamation-triangle me-2"></i>Data Bermasalah</h5>
                            <p class="card-text" id="errorData">0</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card bg-success">
                            <h5 class="card-title"><i class="fas fa-clock me-2"></i>Interval Check</h5>
                            <p class="card-text">5 menit</p>
                        </div>
                    </div>
                </div>

                <!-- FFB Worker Stats Cards -->
                <div class="row mb-4" id="ffbworker-stats" style="display: none;">
                    <div class="col-md-3">
                        <div class="stats-card bg-info">
                            <h5 class="card-title"><i class="fas fa-database me-2"></i>Total Pekerja</h5>
                            <p class="card-text" id="totalFfbworkerData">0</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card bg-warning text-dark">
                            <h5 class="card-title"><i class="fas fa-user-tag me-2"></i>Divisi</h5>
                            <p class="card-text" id="ffbworkerDivisi">0</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card bg-danger">
                            <h5 class="card-title"><i class="fas fa-exclamation-triangle me-2"></i>Perlu Diverifikasi</h5>
                            <p class="card-text" id="actionNeededFfbworker">0</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card bg-success">
                            <h5 class="card-title"><i class="fas fa-clock me-2"></i>Interval Check</h5>
                            <p class="card-text">5 menit</p>
                        </div>
                    </div>
                </div>

                <!-- Grafik Perubahan -->
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title mb-3">Grafik Jumlah Data</h5>
                                <canvas id="dataChangeChart" height="100"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Grafik Timeline History -->
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Grafik Timeline History</h5>
                                <div>
                                    <select id="historyTimeRange" class="form-select form-select-sm me-2 d-inline-block" style="width: auto;">
                                        <option value="24">24 Jam Terakhir</option>
                                        <option value="72">3 Hari Terakhir</option>
                                        <option value="168">7 Hari Terakhir</option>
                                        <option value="720">30 Hari Terakhir</option>
                                        <option value="all" selected>Semua Data</option>
                                    </select>
                                    <button id="loadHistoryBtn" class="btn btn-sm btn-primary">
                                        <i class="fas fa-sync-alt me-1"></i> Muat History
                                    </button>
                                </div>
                            </div>
                            <div class="card-body timeline-chart-container">
                                <canvas id="timelineChart" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tab Content -->
                <div class="tab-content" id="dataTypeTabContent">

                    <!-- FFB Worker Tab (Non-Pemanen dengan Ripe) -->
                    <div class="tab-pane fade" id="ffbworker-data" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table id="ffbworkerTable" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>TRANSNO</th>
                                                <th>FROMOCCODE</th>
                                                <th>TOOCCODE</th>
                                                <th>WORKERCODE</th>
                                                <th>FIELDNO</th>
                                                <th>LOOSEFRUIT</th>
                                                <th>RIPE</th>
                                                <th>UNRIPE</th>
                                                <th>OVERRIPE</th>
                                                <th>TRANSDATE</th>
                                                <th>TRANSSTATUS</th>
                                                <th>EmployeeStatus</th>
                                                <th>PosCode</th>
                                                <th>JumlahKemunculan</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Data akan diisi melalui JavaScript -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tunjangan Beras Tab -->
                    <div class="tab-pane fade show active" id="tunjangan-data" role="tabpanel">
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table id="dataTable" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>EmpCode</th>
                                <th>Nama</th>
                                <th>Status Pernikahan</th>
                                <th>Jml Keluarga</th>
                                                <!-- Keluarga 1 -->
                                <th>Keluarga 1</th>
                                                <th>Usia 1</th>
                                                <th>Status Tunjangan 1</th>
                                                <th>Is Employee 1</th>
                                                <th>Status Validasi 1</th>
                                                <!-- Keluarga 2 -->
                                <th>Keluarga 2</th>
                                                <th>Usia 2</th>
                                                <th>Status Tunjangan 2</th>
                                                <th>Is Employee 2</th>
                                                <th>Status Validasi 2</th>
                                                <!-- Keluarga 3 -->
                                <th>Keluarga 3</th>
                                                <th>Usia 3</th>
                                                <th>Status Tunjangan 3</th>
                                                <th>Is Employee 3</th>
                                                <th>Status Validasi 3</th>
                                                <!-- Keluarga 4 -->
                                                <th>Keluarga 4</th>
                                                <th>Usia 4</th>
                                                <th>Status Tunjangan 4</th>
                                                <th>Is Employee 4</th>
                                                <th>Status Validasi 4</th>
                                                <!-- Keluarga 5 -->
                                                <th>Keluarga 5</th>
                                                <th>Usia 5</th>
                                                <th>Status Tunjangan 5</th>
                                                <th>Is Employee 5</th>
                                                <th>Status Validasi 5</th>
                                                <!-- Tunjangan Info -->
                                                <th>PayRate</th>
                                <th>Rice Aktual</th>
                                <th>Rice Seharusnya</th>
                                                <th>Status Tunjangan</th>
                                <th>Selisih</th>
                                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% data.forEach(function(row) { %>
                                                <tr class="<%= (row.Status_Validasi1 === 'Salah' || row.Status_Validasi2 === 'Salah' || row.Status_Validasi3 === 'Salah' || row.Status_Validasi4 === 'Salah' || row.Status_Validasi5 === 'Salah') ? 'warning-row' : (row.Perbandingan_RiceRation === 'Beda' ? 'error-row' : '') %>">
                                    <td><%= row.EmpCode %></td>
                                    <td><%= row.EmpName %></td>
                                    <td><%= row.Status_Pernikahan %></td>
                                    <td><%= row.JmlKeluarga %></td>
                                                    <!-- Keluarga 1 -->
                                    <td><%= row.Keluarga1 || '-' %></td>
                                                    <td><%= row.Usia1 || '-' %></td>
                                                    <td><%= row.Status_Tunjangan_Beras1 || '-' %></td>
                                                    <td><%= row.IsEmployee1 || '-' %></td>
                                    <td><%= row.Status_Validasi1 || '-' %></td>
                                                    <!-- Keluarga 2 -->
                                    <td><%= row.Keluarga2 || '-' %></td>
                                                    <td><%= row.Usia2 || '-' %></td>
                                                    <td><%= row.Status_Tunjangan_Beras2 || '-' %></td>
                                                    <td><%= row.IsEmployee2 || '-' %></td>
                                    <td><%= row.Status_Validasi2 || '-' %></td>
                                                    <!-- Keluarga 3 -->
                                    <td><%= row.Keluarga3 || '-' %></td>
                                                    <td><%= row.Usia3 || '-' %></td>
                                                    <td><%= row.Status_Tunjangan_Beras3 || '-' %></td>
                                                    <td><%= row.IsEmployee3 || '-' %></td>
                                    <td><%= row.Status_Validasi3 || '-' %></td>
                                                    <!-- Keluarga 4 -->
                                                    <td><%= row.Keluarga4 || '-' %></td>
                                                    <td><%= row.Usia4 || '-' %></td>
                                                    <td><%= row.Status_Tunjangan_Beras4 || '-' %></td>
                                                    <td><%= row.IsEmployee4 || '-' %></td>
                                                    <td><%= row.Status_Validasi4 || '-' %></td>
                                                    <!-- Keluarga 5 -->
                                                    <td><%= row.Keluarga5 || '-' %></td>
                                                    <td><%= row.Usia5 || '-' %></td>
                                                    <td><%= row.Status_Tunjangan_Beras5 || '-' %></td>
                                                    <td><%= row.IsEmployee5 || '-' %></td>
                                                    <td><%= row.Status_Validasi5 || '-' %></td>
                                                    <!-- Tunjangan Info -->
                                                    <td><%= row.PayRate || '-' %></td>
                                    <td><%= row.RiceRation_Aktual %></td>
                                    <td><%= row.RiceRation_Seharusnya %></td>
                                                    <td><%= row.Status_Tunjangan %></td>
                                    <td><%= row.Selisih_RiceRation %></td>
                                                    <td><%= row.Perbandingan_RiceRation %></td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                                </div>
                </div>
            </div>
        </div>

                    <!-- BPJS Tab -->
                    <div class="tab-pane fade" id="bpjs-data" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table id="bpjsTable" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>EmpCode</th>
                                                <th>Nama</th>
                                                <th>SalGradeCode</th>
                                                <th>JKKNo</th>
                                                <th>Status JKKScheme</th>
                                                <th>Status JHTScheme</th>
                                                <th>Status BPJSScheme</th>
                                                <th>Status Keseluruhan</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% bpjsData.forEach(function(row) { %>
                                                <tr class="<%= row.StatusKeseluruhan === 'Semua skema belum diisi' ? 'error-row' : 'warning-row' %>">
                                                    <td><%= row.EmpCode %></td>
                                                    <td><%= row.EmpName %></td>
                                                    <td><%= row.SalGradeCode %></td>
                                                    <td><%= row.JKKNo || '-' %></td>
                                                    <td><%= row.Status_JKKScheme %></td>
                                                    <td><%= row.Status_JHTScheme %></td>
                                                    <td><%= row.Status_BPJSScheme %></td>
                                                    <td><%= row.StatusKeseluruhan %></td>
                                                </tr>
                                            <% }); %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- GWScanner Tab -->
                    <div class="tab-pane fade" id="gwscanner-data" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table id="gwscannerTable" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>TRANSNO</th>
                                                <th>FROMOCCODE</th>
                                                <th>TOOCCODE</th>
                                                <th>SCANNERUSERCODE</th>
                                                <th>WORKERCODE</th>
                                                <th>FIELDNO</th>
                                                <th>JOBCODE</th>
                                                <th>VEHICLENO</th>
                                                <th>TRANSDATE</th>
                                                <th>RECORDTAG</th>
                                                <th>TRANSSTATUS</th>
                                                <th>ISCONTRACT</th>
                                                <th>DATECREATED</th>
                                                <th>SCANOUTDATETIME</th>
                                                <th>INTEGRATETIME</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Data akan diisi melalui JavaScript -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- History Tab -->
                    <div class="tab-pane fade" id="history-data" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table id="historyTable" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>Timestamp</th>
                                                <th>Jenis Data</th>
                                                <th>Jumlah Record</th>
                                                <th>Ukuran File</th>
                                                <th>Aksi</th>
                                            </tr>
                                        </thead>
                                        <tbody id="historyTableBody">
                                            <!-- Data akan diisi melalui AJAX -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab Konfigurasi -->
            <div class="tab-pane fade" id="config" role="tabpanel">
                <h1 class="h3 mb-4">Konfigurasi Sistem</h1>
                
                <div class="config-section">
                    <h3 class="h5 mb-4"><i class="fas fa-database me-2"></i>Database Configuration</h3>
                    <div class="mb-3">
                        <strong>Database:</strong> <span id="currentDb">Remote Database (10.0.0.2,1888)</span>
                    </div>
                    <div class="mb-3">
                        <strong>Status:</strong> <span id="dbStatus" class="badge bg-success">Connected</span>
                    </div>
                </div>

                <div class="config-section">
                    <h3 class="h5 mb-4"><i class="fas fa-envelope me-2"></i>Email Configuration</h3>
                    <form id="emailConfigForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Email Pengirim</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                        <input type="email" class="form-control" id="senderEmail" value="atharizki.developer@gmail.com">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Email Penerima</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                        <input type="email" class="form-control" id="receiverEmail" value="estate_1@rebinmas.com">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">CC</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-users"></i></span>
                                        <input type="email" class="form-control" id="ccEmail" value="atharizki001@gmail.com">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Interval Pengecekan (menit)</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                        <input type="number" class="form-control" id="scheduleInterval" value="5" min="1">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Interval Email (menit)</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-envelope-open-text"></i></span>
                                        <input type="number" class="form-control" id="emailInterval" value="180" min="1">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Template Pesan</label>
                                    <textarea class="form-control" id="emailTemplate" rows="5">Ditemukan ketidaksesuaian pada data tunjangan beras karyawan. Mohon untuk segera ditindaklanjuti.</textarea>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>Simpan Konfigurasi
                                </button>
                                <button type="button" class="btn btn-success ms-2" id="sendTestEmail">
                                    <i class="fas fa-paper-plane me-2"></i>Kirim Email Test
                                </button>
                                <button type="button" class="btn btn-info ms-2" id="sendCurrentData">
                                    <i class="fas fa-envelope me-2"></i>Kirim Data Sekarang
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

                <div class="config-section">
                    <h3 class="h5 mb-4"><i class="fas fa-chart-bar me-2"></i>Status Monitoring</h3>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="alert alert-info">
                                <strong>Pengecekan Terakhir:</strong><br>
                                <span id="lastCheckTime"><%= lastCheck %></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="alert alert-success">
                                <strong>Email Terakhir:</strong><br>
                                <span id="lastEmailTime"><%= lastEmail %></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="alert alert-primary">
                                <strong>Status:</strong><br>
                                <span class="badge bg-success">Aktif</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="last-check">
            <i class="fas fa-history me-2"></i>Last Check: <span id="lastCheckTimeFooter"><%= lastCheck %></span>
        </div>

        <button id="refreshBtn" class="btn btn-primary refresh-button">
            <i class="fas fa-sync-alt me-2"></i>Refresh Data
        </button>
    </div>

    <!-- Modal untuk detail history -->
    <div class="modal fade" id="historyDetailModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="historyDetailTitle">Detail History</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Timestamp:</strong> <span id="historyDetailTimestamp"></span>
                    </div>
                    <div class="mb-3">
                        <strong>Jenis Data:</strong> <span id="historyDetailType"></span>
                    </div>
                    <div class="mb-3">
                        <strong>Jumlah Record:</strong> <span id="historyDetailCount"></span>
                    </div>
                    <div class="mb-3">
                        <strong>Data:</strong>
                        <div id="historyDetailData" class="mt-2 p-3 bg-light rounded"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script src="/chart-init.js"></script>
    <script src="/timeline-chart.js"></script>
    <script src="/notification.js"></script>
    
    <script>
        $(document).ready(function() {
            // Initialize DataTables
            const dataTable = $('#dataTable').DataTable({
                responsive: true,
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                language: {
                    search: "Cari:",
                    lengthMenu: "Tampilkan _MENU_ data",
                    info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                    infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                    infoFiltered: "(disaring dari _MAX_ total data)",
                    zeroRecords: "Tidak ada data yang cocok",
                    paginate: {
                        first: "Pertama",
                        last: "Terakhir",
                        next: "Selanjutnya",
                        previous: "Sebelumnya"
                    }
                }
            });
            
            const bpjsTable = $('#bpjsTable').DataTable({
                responsive: true,
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                language: {
                    search: "Cari:",
                    lengthMenu: "Tampilkan _MENU_ data",
                    info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                    infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                    infoFiltered: "(disaring dari _MAX_ total data)",
                    zeroRecords: "Tidak ada data yang cocok",
                    paginate: {
                        first: "Pertama",
                        last: "Terakhir",
                        next: "Selanjutnya",
                        previous: "Sebelumnya"
                    }
                }
            });
            
            const gwscannerTable = $('#gwscannerTable').DataTable({
                responsive: true,
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                language: {
                    search: "Cari:",
                    lengthMenu: "Tampilkan _MENU_ data",
                    info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                    infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                    infoFiltered: "(disaring dari _MAX_ total data)",
                    zeroRecords: "Tidak ada data yang cocok",
                    paginate: {
                        first: "Pertama",
                        last: "Terakhir",
                        next: "Selanjutnya",
                        previous: "Sebelumnya"
                    }
                }
            });
            
            const historyTable = $('#historyTable').DataTable({
                responsive: true,
                order: [[0, 'desc']],
                language: {
                    search: "Cari:",
                    lengthMenu: "Tampilkan _MENU_ data",
                    info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                    infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                    infoFiltered: "(disaring dari _MAX_ total data)",
                    zeroRecords: "Tidak ada data yang cocok",
                    paginate: {
                        first: "Pertama",
                        last: "Terakhir",
                        next: "Selanjutnya",
                        previous: "Sebelumnya"
                    }
                }
            });
            
            // Load history data
            loadHistoryData();

            // Initialize DataTable with select feature
            $('#dataTable tbody').on('click', 'tr', function() {
                if ($(this).hasClass('selected-row')) {
                    $(this).removeClass('selected-row');
                } else {
                    dataTable.$('tr.selected-row').removeClass('selected-row');
                    $(this).addClass('selected-row');
                }
            });

            // Toggle column visibility
            $('#toggleColumns').on('click', function() {
                const columns = dataTable.column(4);
                columns.visible(!columns.visible()[0]);
            });

            let previousData = [];
            
            // Handle email configuration form
            $('#emailConfigForm').on('submit', function(e) {
                e.preventDefault();
                
                const config = {
                    senderEmail: $('#senderEmail').val(),
                    receiverEmail: $('#receiverEmail').val(),
                    ccEmail: $('#ccEmail').val(),
                    scheduleInterval: $('#scheduleInterval').val(),
                    emailInterval: $('#emailInterval').val(),
                    emailTemplate: $('#emailTemplate').val()
                };

                console.log('Sending config:', config);

                // Save configuration
                $.ajax({
                    url: '/api/config',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(config),
                    success: function(response) {
                        if (response.success) {
                            showToast('Success', 'Konfigurasi berhasil disimpan');
                            // Update last email time if available
                            if (response.config && response.config.lastEmail) {
                                $('#lastEmailTime').text(moment(response.config.lastEmail).format('DD-MM-YYYY HH:mm:ss'));
                            }
                        } else {
                            showToast('Error', 'Gagal menyimpan konfigurasi: ' + response.error, 'danger');
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast('Error', 'Gagal menyimpan konfigurasi: ' + error, 'danger');
                    }
                });
            });

            // Handle test email
            $('#sendTestEmail').click(function() {
                $(this).prop('disabled', true).text('Mengirim...');
                
                $.ajax({
                    url: '/api/send-test',
                    method: 'POST',
                    success: function(response) {
                        if (response.success) {
                            showToast('Success', 'Email test berhasil dikirim');
                            if (response.lastEmail) {
                                $('#lastEmailTime').text(moment(response.lastEmail).format('DD-MM-YYYY HH:mm:ss'));
                            }
                        } else {
                            showToast('Error', 'Gagal mengirim email test: ' + response.error, 'danger');
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast('Error', 'Gagal mengirim email test: ' + error, 'danger');
                    },
                    complete: function() {
                        $('#sendTestEmail').prop('disabled', false).text('Kirim Email Test');
                    }
                });
            });

            // Handle sending current data
            $('#sendCurrentData').click(function() {
                $(this).prop('disabled', true)
                    .html('<i class="fas fa-spinner fa-spin"></i> Mengirim...');
                
                $.ajax({
                    url: '/api/send-current',
                    method: 'POST',
                    success: function(response) {
                        if (response.success) {
                            showToast('Success', 'Data berhasil dikirim via email');
                            if (response.lastEmail) {
                                $('#lastEmailTime').text(moment(response.lastEmail).format('DD-MM-YYYY HH:mm:ss'));
                            }
                        } else {
                            showToast('Error', 'Gagal mengirim data: ' + response.error, 'danger');
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast('Error', 'Gagal mengirim data: ' + error, 'danger');
                    },
                    complete: function() {
                        $('#sendCurrentData').prop('disabled', false)
                            .html('<i class="fas fa-envelope"></i> Kirim Data Sekarang');
                    }
                });
            });

            // Update monitoring stats
            function updateStats(data) {
                const totalData = data.length;
                const errorData = data.filter(row => 
                    row.Status_Validasi1 === 'Salah' || 
                    row.Status_Validasi2 === 'Salah' || 
                    row.Status_Validasi3 === 'Salah' ||
                    row.Status_Validasi4 === 'Salah' ||
                    row.Status_Validasi5 === 'Salah'
                ).length;

                // Calculate new data by comparing with previous data
                const newData = data.filter(row => 
                    !previousData.some(prevRow => prevRow.EmpCode === row.EmpCode)
                ).length;

                $('#totalData').text(totalData);
                $('#errorData').text(errorData);
                $('#newData').text(newData);

                // Update previous data for next comparison
                previousData = [...data];
            }

            // Initialize loading state
            function showLoading(message) {
                $('.loading-text').html(message);
                $('#connectionError').hide();
                $('#loadingOverlay').show();
            }

            function hideLoading() {
                $('#loadingOverlay').fadeOut();
            }

            function showConnectionError(error) {
                $('#errorMessage').text(error || 'Tidak dapat terhubung ke database');
                $('#connectionError').show();
            }

            // Retry connection button
            $('#retryConnection').on('click', function() {
                $('#connectionError').hide();
                refreshAllData();
            });

            // Modified refresh handler
            $('#refreshBtn').click(async function() {
                const activeTab = $('#dataTypeTabs .nav-link.active').attr('id');
                
                if (activeTab === 'tunjangan-tab') {
                    refreshTunjanganData();
                } else if (activeTab === 'bpjs-tab') {
                    refreshBpjsData();
                } else if (activeTab === 'gwscanner-tab') {
                    refreshGwscannerData();
                } else if (activeTab === 'ffbworker-tab') {
                    refreshFfbworkerData();
                } else {
                    refreshAllData();
                }
            });

            // Initial data load with loading indicator
            showLoading(`
                Menghubungkan ke Database...<br>
                <div class="loading-details">
                    <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                    <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">dbo.Incorrect_Input_Jatah_Beras_Based_Employee_Child_Count_Ages</span></p>
                </div>
            `);

            // Simulate initial connection delay
            setTimeout(() => {
                $('#refreshBtn').click();
            }, 1500);

            // Change auto refresh interval to 5 minutes
            setInterval(() => {
                $('#refreshBtn').click();
            }, 5 * 60 * 1000);

            // Add toast notification function
            function showToast(title, message, type = 'success') {
                const toast = `
                    <div class="toast" role="alert">
                        <div class="toast-header bg-${type} text-white">
                            <strong class="me-auto">${title}</strong>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                        </div>
                        <div class="toast-body">${message}</div>
                    </div>
                `;
                $('.toast-container').append(toast);
                const toastElement = $('.toast').last();
                const bsToast = new bootstrap.Toast(toastElement);
                bsToast.show();
                
                // Remove toast after it's hidden
                toastElement.on('hidden.bs.toast', function() {
                    $(this).remove();
                });
            }

            // Add export functionality
            $('#exportData').click(function() {
                const data = dataTable.data().toArray();
                const csv = convertToCSV(data);
                downloadCSV(csv, 'tunjangan_beras_' + moment().format('YYYY-MM-DD') + '.csv');
            });

            function convertToCSV(arr) {
                const array = [Object.keys(arr[0])].concat(arr);
                return array.map(row =>
                    Object.values(row)
                        .map(str => `"${str}"`)
                        .join(',')
                ).join('\n');
            }

            function downloadCSV(csv, filename) {
                const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                if (link.download !== undefined) {
                    const url = URL.createObjectURL(blob);
                    link.setAttribute('href', url);
                    link.setAttribute('download', filename);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            }

            // Fungsi untuk memuat data history
            function loadHistoryData() {
                fetch('/api/history')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            historyTable.clear();
                            
                            data.history.forEach(item => {
                                const date = new Date(item.timestamp);
                                const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
                                const fileSize = formatFileSize(item.size);
                                const dataType = item.filename.split('_')[0];
                                const recordCount = ''; // Akan diisi saat detail dibuka
                                
                                const viewButton = `<button class="btn btn-sm btn-primary view-history" data-filename="${item.filename}">
                                    <i class="fas fa-eye"></i> Lihat
                                </button>`;
                                
                                historyTable.row.add([
                                    formattedDate,
                                    dataType,
                                    recordCount,
                                    fileSize,
                                    viewButton
                                ]);
                            });
                            
                            historyTable.draw();
                            
                            // Tambahkan event listener untuk tombol lihat
                            $('.view-history').on('click', function() {
                                const filename = $(this).data('filename');
                                viewHistoryDetail(filename);
                            });
                        } else {
                            showToast('Error', 'Gagal memuat data history', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error loading history data:', error);
                        showToast('Error', 'Gagal memuat data history', 'error');
                    });
            }

            // Fungsi untuk melihat detail history
            function viewHistoryDetail(filename) {
                fetch(`/api/history/${filename}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const historyData = data.data;
                            
                            // Update record count di tabel
                            const row = historyTable.rows().nodes().filter(node => {
                                return $(node).find('.view-history').data('filename') === filename;
                            });
                            
                            if (row.length > 0) {
                                historyTable.cell(row[0], 2).data(historyData.recordCount).draw();
                            }
                            
                            // Tampilkan detail dalam modal
                            $('#historyDetailTitle').text(`Detail History: ${filename}`);
                            $('#historyDetailTimestamp').text(new Date(historyData.timestamp).toLocaleString());
                            $('#historyDetailType').text(historyData.dataType);
                            $('#historyDetailCount').text(historyData.recordCount);
                            
                            // Tampilkan data dalam format JSON yang rapi
                            $('#historyDetailData').html(
                                `<pre>${JSON.stringify(historyData.data.slice(0, 5), null, 2)}</pre>
                                <p class="text-muted">Menampilkan 5 data pertama dari ${historyData.recordCount} data</p>`
                            );
                            
                            $('#historyDetailModal').modal('show');
                        } else {
                            showToast('Error', 'Gagal memuat detail history', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error loading history detail:', error);
                        showToast('Error', 'Gagal memuat detail history', 'error');
                    });
            }

            // Format ukuran file
            function formatFileSize(bytes) {
                if (bytes < 1024) return bytes + ' B';
                else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + ' KB';
                else return (bytes / 1048576).toFixed(2) + ' MB';
            }

            // Event listener untuk tab history
            $('#history-tab').on('shown.bs.tab', function (e) {
                loadHistoryData();
            });

            // Fungsi untuk refresh data tunjangan
            async function refreshTunjanganData() {
                showLoading(`
                    Memperbarui Data Tunjangan Beras...<br>
                    <div class="loading-details">
                        <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                        <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">dbo.Incorrect_Input_Jatah_Beras_Based_Employee_Child_Count_Ages</span></p>
                    </div>
                `);
                
                $('#refreshBtn').prop('disabled', true);
                
                try {
                    const response = await fetch('/api/refresh/tunjangan');
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server error: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        dataTable.clear();
                        
                        result.data.forEach(row => {
                            const tr = dataTable.row.add([
                                row.EmpCode,
                                row.EmpName,
                                row.Status_Pernikahan,
                                row.JmlKeluarga,
                                row.Keluarga1 || '-',
                                row.Usia1 || '-',
                                row.Status_Tunjangan_Beras1 || '-',
                                row.IsEmployee1 || '-',
                                row.Status_Validasi1 || '-',
                                row.Keluarga2 || '-',
                                row.Usia2 || '-',
                                row.Status_Tunjangan_Beras2 || '-',
                                row.IsEmployee2 || '-',
                                row.Status_Validasi2 || '-',
                                row.Keluarga3 || '-',
                                row.Usia3 || '-',
                                row.Status_Tunjangan_Beras3 || '-',
                                row.IsEmployee3 || '-',
                                row.Status_Validasi3 || '-',
                                row.Keluarga4 || '-',
                                row.Usia4 || '-',
                                row.Status_Tunjangan_Beras4 || '-',
                                row.IsEmployee4 || '-',
                                row.Status_Validasi4 || '-',
                                row.Keluarga5 || '-',
                                row.Usia5 || '-',
                                row.Status_Tunjangan_Beras5 || '-',
                                row.IsEmployee5 || '-',
                                row.Status_Validasi5 || '-',
                                row.PayRate || '-',
                                row.RiceRation_Aktual,
                                row.RiceRation_Seharusnya,
                                row.Status_Tunjangan,
                                row.Selisih_RiceRation,
                                row.Perbandingan_RiceRation
                            ]).draw(false).node();
                            
                            if (row.Status_Validasi1 === 'Salah' || row.Status_Validasi2 === 'Salah' || 
                                row.Status_Validasi3 === 'Salah' || row.Status_Validasi4 === 'Salah' || 
                                row.Status_Validasi5 === 'Salah') {
                                $(tr).addClass('warning-row');
                            } else if (row.Perbandingan_RiceRation === 'Beda') {
                                $(tr).addClass('error-row');
                            }
                        });
                        
                        updateStats(result.data);
                        showToast('Sukses', 'Data tunjangan beras berhasil diperbarui', 'success');

                        // Update last check time
                        $('#lastCheckTime').text(new Date().toLocaleString());
                        $('#lastCheckTimeFooter').text(new Date().toLocaleString());
                        
                        hideLoading();
                    } else {
                        throw new Error(result.error || 'Gagal memperbarui data tunjangan beras');
                    }
                } catch (error) {
                    console.error('Error refreshing tunjangan data:', error);
                    showToast('Error', 'Gagal memperbarui data tunjangan beras: ' + error.message, 'danger');
                    showConnectionError(error.message);
                } finally {
                    $('#refreshBtn').prop('disabled', false);
                }
            }

            // Fungsi untuk refresh data BPJS
            async function refreshBpjsData() {
                showLoading(`
                    Memperbarui Data BPJS...<br>
                    <div class="loading-details">
                        <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                        <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">dbo.HR_STATUTORY</span></p>
                    </div>
                `);
                
                $('#refreshBtn').prop('disabled', true);
                
                try {
                    const response = await fetch('/api/refresh/bpjs');
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server error: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        bpjsTable.clear();
                        
                        let incompleteCount = 0;
                        let actionNeededCount = 0;
                        
                        result.data.forEach(row => {
                            const tr = bpjsTable.row.add([
                                row.EmpCode,
                                row.EmpName,
                                row.SalGradeCode,
                                row.JKKNo || '-',
                                row.Status_JKKScheme,
                                row.Status_JHTScheme,
                                row.Status_BPJSScheme,
                                row.StatusKeseluruhan
                            ]).draw(false).node();
                            
                            if (row.StatusKeseluruhan === 'Semua skema belum diisi') {
                                $(tr).addClass('error-row');
                                incompleteCount++;
                                actionNeededCount++;
                            } else {
                                $(tr).addClass('warning-row');
                                incompleteCount++;
                            }
                        });
                        
                        // Update BPJS statistics
                        $('#totalBpjsData').text(result.data.length);
                        $('#partialBpjsData').text(incompleteCount - actionNeededCount);
                        $('#emptyBpjsData').text(actionNeededCount);
                        
                        showToast('Sukses', 'Data BPJS berhasil diperbarui', 'success');
                        
                        // Update last check time
                        $('#lastCheckTime').text(new Date().toLocaleString());
                        $('#lastCheckTimeFooter').text(new Date().toLocaleString());
                        
                        hideLoading();
                    } else {
                        throw new Error(result.error || 'Gagal memperbarui data BPJS');
                    }
                } catch (error) {
                    console.error('Error refreshing BPJS data:', error);
                    showToast('Error', 'Gagal memperbarui data BPJS: ' + error.message, 'danger');
                    showConnectionError(error.message);
                } finally {
                    $('#refreshBtn').prop('disabled', false);
                }
            }

            // Fungsi untuk refresh data GWScanner
            async function refreshGwscannerData() {
                showLoading(`
                    Memperbarui Data GWScanner...<br>
                    <div class="loading-details">
                        <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                        <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">dbo.GWScanner_Data</span></p>
                    </div>
                `);
                
                $('#refreshBtn').prop('disabled', true);
                
                try {
                    const response = await fetch('/api/refresh/gwscanner');
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server error: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Completely destroy and remove the DataTable
                        if ($.fn.DataTable.isDataTable('#gwscannerTable')) {
                            $('#gwscannerTable').DataTable().destroy();
                        }
                        
                        // Clear the table body completely
                        $('#gwscannerTable tbody').empty();
                        
                        // Manually construct the HTML for each row
                        if (result.data && result.data.length > 0) {
                            result.data.forEach(row => {
                                const rowElement = $('<tr class="error-row"></tr>');
                                
                                // Add each cell in the exact same order as the header
                                rowElement.append(`<td>${row.ID || ''}</td>`);
                                rowElement.append(`<td>${row.TRANSNO || ''}</td>`);
                                rowElement.append(`<td>${row.FROMOCCODE || ''}</td>`);
                                rowElement.append(`<td>${row.TOOCCODE || ''}</td>`);
                                rowElement.append(`<td>${row.SCANNERUSERCODE || ''}</td>`);
                                rowElement.append(`<td>${row.WORKERCODE || ''}</td>`);
                                rowElement.append(`<td>${row.FIELDNO || ''}</td>`);
                                rowElement.append(`<td>${row.JOBCODE || ''}</td>`);
                                rowElement.append(`<td>${row.VEHICLENO || ''}</td>`);
                                rowElement.append(`<td>${row.TRANSDATE ? new Date(row.TRANSDATE).toLocaleDateString() : '-'}</td>`);
                                rowElement.append(`<td>${row.RECORDTAG || ''}</td>`);
                                rowElement.append(`<td>${row.TRANSSTATUS || ''}</td>`);
                                rowElement.append(`<td>${row.ISCONTRACT || ''}</td>`);
                                rowElement.append(`<td>${row.DATECREATED ? new Date(row.DATECREATED).toLocaleString() : '-'}</td>`);
                                rowElement.append(`<td>${row.SCANOUTDATETIME ? new Date(row.SCANOUTDATETIME).toLocaleString() : '-'}</td>`);
                                rowElement.append(`<td>${row.INTEGRATETIME ? new Date(row.INTEGRATETIME).toLocaleString() : '-'}</td>`);
                                
                                // Append the complete row to the table body
                                $('#gwscannerTable tbody').append(rowElement);
                            });
                        } else {
                            // Add a single row with colspan matching the exact header column count
                            $('#gwscannerTable tbody').append('<tr><td colspan="16" class="text-center">Tidak ada data duplikat GWScanner</td></tr>');
                        }
                        
                        // Initialize DataTable after HTML is completely ready
                        $('#gwscannerTable').DataTable({
                            responsive: true,
                            dom: 'Bfrtip',
                            buttons: [
                                'copy', 'csv', 'excel', 'pdf', 'print'
                            ],
                            language: {
                                search: "Cari:",
                                lengthMenu: "Tampilkan _MENU_ data",
                                info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                                infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                                infoFiltered: "(disaring dari _MAX_ total data)",
                                zeroRecords: "Tidak ada data yang cocok",
                                paginate: {
                                    first: "Pertama",
                                    last: "Terakhir",
                                    next: "Selanjutnya",
                                    previous: "Sebelumnya"
                                }
                            }
                        });
                        
                        // Update GWScanner statistics
                        $('#totalGwscannerData').text(result.data ? result.data.length : 0);
                        $('#duplicateGwscannerData').text(result.data ? result.data.length : 0);
                        $('#actionNeededGwscannerData').text(result.data ? result.data.length : 0);
                        
                        showToast('Sukses', 'Data GWScanner berhasil diperbarui', 'success');
                        
                        // Update last check time
                        $('#lastCheckTime').text(new Date().toLocaleString());
                        $('#lastCheckTimeFooter').text(new Date().toLocaleString());
                        
                        // Refresh history data jika tab history aktif
                        if ($('#history-tab').hasClass('active')) {
                            loadHistoryData();
                        }
                        
                        hideLoading();
                    } else {
                        throw new Error(result.error || 'Gagal memperbarui data GWScanner');
                    }
                } catch (error) {
                    console.error('Error refreshing GWScanner data:', error);
                    showToast('Error', 'Gagal memperbarui data GWScanner: ' + error.message, 'danger');
                    showConnectionError(error.message);
                } finally {
                    $('#refreshBtn').prop('disabled', false);
                }
            }

            // Fungsi untuk refresh semua data
            async function refreshAllData() {
                showLoading(`
                    Memperbarui Semua Data...<br>
                    <div class="loading-details">
                        <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                        <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">Multiple Tables</span></p>
                    </div>
                `);
                
                $('#refreshBtn').prop('disabled', true);
                
                try {
                    const response = await fetch('/api/refresh');
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server error: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Update tunjangan data
                        dataTable.clear();
                        
                        result.data.forEach(row => {
                            const tr = dataTable.row.add([
                                row.EmpCode,
                                row.EmpName,
                                row.Status_Pernikahan,
                                row.JmlKeluarga,
                                row.Keluarga1 || '-',
                                row.Usia1 || '-',
                                row.Status_Tunjangan_Beras1 || '-',
                                row.IsEmployee1 || '-',
                                row.Status_Validasi1 || '-',
                                row.Keluarga2 || '-',
                                row.Usia2 || '-',
                                row.Status_Tunjangan_Beras2 || '-',
                                row.IsEmployee2 || '-',
                                row.Status_Validasi2 || '-',
                                row.Keluarga3 || '-',
                                row.Usia3 || '-',
                                row.Status_Tunjangan_Beras3 || '-',
                                row.IsEmployee3 || '-',
                                row.Status_Validasi3 || '-',
                                row.Keluarga4 || '-',
                                row.Usia4 || '-',
                                row.Status_Tunjangan_Beras4 || '-',
                                row.IsEmployee4 || '-',
                                row.Status_Validasi4 || '-',
                                row.Keluarga5 || '-',
                                row.Usia5 || '-',
                                row.Status_Tunjangan_Beras5 || '-',
                                row.IsEmployee5 || '-',
                                row.Status_Validasi5 || '-',
                                row.PayRate || '-',
                                row.RiceRation_Aktual,
                                row.RiceRation_Seharusnya,
                                row.Status_Tunjangan,
                                row.Selisih_RiceRation,
                                row.Perbandingan_RiceRation
                            ]).draw(false).node();
                            
                            if (row.Status_Validasi1 === 'Salah' || row.Status_Validasi2 === 'Salah' || 
                                row.Status_Validasi3 === 'Salah' || row.Status_Validasi4 === 'Salah' || 
                                row.Status_Validasi5 === 'Salah') {
                                $(tr).addClass('warning-row');
                            } else if (row.Perbandingan_RiceRation === 'Beda') {
                                $(tr).addClass('error-row');
                            }
                        });
                        
                        // Update BPJS data
                        bpjsTable.clear();
                        
                        result.bpjsData.forEach(row => {
                            const tr = bpjsTable.row.add([
                                row.EmpCode,
                                row.EmpName,
                                row.SalGradeCode,
                                row.JKKNo || '-',
                                row.Status_JKKScheme,
                                row.Status_JHTScheme,
                                row.Status_BPJSScheme,
                                row.StatusKeseluruhan
                            ]).draw(false).node();
                            
                            if (row.StatusKeseluruhan === 'Semua skema belum diisi') {
                                $(tr).addClass('error-row');
                            } else {
                                $(tr).addClass('warning-row');
                            }
                        });
                        
                        // Update GWScanner data if available
                        if (result.gwscannerData) {
                            // Completely destroy and remove the DataTable
                            if ($.fn.DataTable.isDataTable('#gwscannerTable')) {
                                $('#gwscannerTable').DataTable().destroy();
                            }
                            
                            // Clear the table body completely
                            $('#gwscannerTable tbody').empty();
                            
                            // Manually construct the HTML for each row
                            if (result.gwscannerData && result.gwscannerData.length > 0) {
                                result.gwscannerData.forEach(row => {
                                    const rowElement = $('<tr class="error-row"></tr>');
                                    
                                    // Add each cell in the exact same order as the header
                                    rowElement.append(`<td>${row.ID || ''}</td>`);
                                    rowElement.append(`<td>${row.TRANSNO || ''}</td>`);
                                    rowElement.append(`<td>${row.FROMOCCODE || ''}</td>`);
                                    rowElement.append(`<td>${row.TOOCCODE || ''}</td>`);
                                    rowElement.append(`<td>${row.SCANNERUSERCODE || ''}</td>`);
                                    rowElement.append(`<td>${row.WORKERCODE || ''}</td>`);
                                    rowElement.append(`<td>${row.FIELDNO || ''}</td>`);
                                    rowElement.append(`<td>${row.JOBCODE || ''}</td>`);
                                    rowElement.append(`<td>${row.VEHICLENO || ''}</td>`);
                                    rowElement.append(`<td>${row.TRANSDATE ? new Date(row.TRANSDATE).toLocaleDateString() : '-'}</td>`);
                                    rowElement.append(`<td>${row.RECORDTAG || ''}</td>`);
                                    rowElement.append(`<td>${row.TRANSSTATUS || ''}</td>`);
                                    rowElement.append(`<td>${row.ISCONTRACT || ''}</td>`);
                                    rowElement.append(`<td>${row.DATECREATED ? new Date(row.DATECREATED).toLocaleString() : '-'}</td>`);
                                    rowElement.append(`<td>${row.SCANOUTDATETIME ? new Date(row.SCANOUTDATETIME).toLocaleString() : '-'}</td>`);
                                    rowElement.append(`<td>${row.INTEGRATETIME ? new Date(row.INTEGRATETIME).toLocaleString() : '-'}</td>`);
                                    
                                    // Append the complete row to the table body
                                    $('#gwscannerTable tbody').append(rowElement);
                                });
                            } else {
                                // Add a single row with colspan matching the exact header column count
                                $('#gwscannerTable tbody').append('<tr><td colspan="16" class="text-center">Tidak ada data duplikat GWScanner</td></tr>');
                            }
                            
                            // Initialize DataTable after HTML is completely ready
                            $('#gwscannerTable').DataTable({
                                responsive: true,
                                dom: 'Bfrtip',
                                buttons: [
                                    'copy', 'csv', 'excel', 'pdf', 'print'
                                ],
                                language: {
                                    search: "Cari:",
                                    lengthMenu: "Tampilkan _MENU_ data",
                                    info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                                    infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                                    infoFiltered: "(disaring dari _MAX_ total data)",
                                    zeroRecords: "Tidak ada data yang cocok",
                                    paginate: {
                                        first: "Pertama",
                                        last: "Terakhir",
                                        next: "Selanjutnya",
                                        previous: "Sebelumnya"
                                    }
                                }
                            });
                            
                            // Update GWScanner statistics
                            $('#totalGwscannerData').text(result.gwscannerData.length);
                            $('#duplicateGwscannerData').text(result.gwscannerData.length);
                            $('#actionNeededGwscannerData').text(result.gwscannerData.length);
                        }
                        
                        updateStats(result.data);
                        showToast('Sukses', 'Semua data berhasil diperbarui', 'success');
                        
                        // Update last check time
                        $('#lastCheckTime').text(new Date().toLocaleString());
                        $('#lastCheckTimeFooter').text(new Date().toLocaleString());
                        
                        // Refresh history data jika tab history aktif
                        if ($('#history-tab').hasClass('active')) {
                            loadHistoryData();
                        }
                        
                        hideLoading();
                    } else {
                        throw new Error(result.error || 'Gagal memperbarui data');
                    }
                } catch (error) {
                    console.error('Error refreshing data:', error);
                    showToast('Error', 'Gagal memperbarui data: ' + error.message, 'danger');
                    showConnectionError(error.message);
                } finally {
                    $('#refreshBtn').prop('disabled', false);
                }
            }

            // Handle tab changes to show/hide appropriate stats cards
            $('button[data-bs-toggle="pill"]').on('shown.bs.tab', function (e) {
                const targetId = $(e.target).attr('data-bs-target');
                
                // Hide all stats cards first
                $('#tunjangan-stats').hide();
                $('#bpjs-stats').hide();
                $('#gwscanner-stats').hide();
                $('#ffbworker-stats').hide();
                
                // Show the appropriate stats cards based on active tab
                if (targetId === '#tunjangan-data') {
                    $('#tunjangan-stats').show();
                } else if (targetId === '#bpjs-data') {
                    $('#bpjs-stats').show();
                } else if (targetId === '#gwscanner-data') {
                    $('#gwscanner-stats').show();
                    
                    // When switching to GWScanner tab, always reinitialize the table
                    if ($.fn.DataTable.isDataTable('#gwscannerTable')) {
                        $('#gwscannerTable').DataTable().destroy();
                        
                        $('#gwscannerTable').DataTable({
                            responsive: true,
                            dom: 'Bfrtip',
                            buttons: [
                                'copy', 'csv', 'excel', 'pdf', 'print'
                            ],
                            language: {
                                search: "Cari:",
                                lengthMenu: "Tampilkan _MENU_ data",
                                info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                                infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                                infoFiltered: "(disaring dari _MAX_ total data)",
                                zeroRecords: "Tidak ada data yang cocok",
                                paginate: {
                                    first: "Pertama",
                                    last: "Terakhir",
                                    next: "Selanjutnya",
                                    previous: "Sebelumnya"
                                }
                            }
                        });
                    }
                } else if (targetId === '#ffbworker-data') {
                    $('#ffbworker-stats').show();
                    
                    // When switching to FFB Worker tab, initialize table if needed
                    if ($.fn.DataTable.isDataTable('#ffbworkerTable')) {
                        $('#ffbworkerTable').DataTable().destroy();
                        
                        $('#ffbworkerTable').DataTable({
                            responsive: true,
                            dom: 'Bfrtip',
                            buttons: [
                                'copy', 'csv', 'excel', 'pdf', 'print'
                            ],
                            language: {
                                search: "Cari:",
                                lengthMenu: "Tampilkan _MENU_ data",
                                info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                                infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                                infoFiltered: "(disaring dari _MAX_ total data)",
                                zeroRecords: "Tidak ada data yang cocok",
                                paginate: {
                                    first: "Pertama",
                                    last: "Terakhir",
                                    next: "Selanjutnya",
                                    previous: "Sebelumnya"
                                }
                            }
                        });
                    }
                    
                    // Refresh FFB Worker data when tab is shown
                    refreshFfbworkerData();
                }
                
                // Update chart whenever tab changes
                updateDataChart();
            });

            // Fungsi untuk refresh data FFB Worker (Non-Pemanen dengan Ripe)
            async function refreshFfbworkerData() {
                showLoading(`
                    Memperbarui Data Non-Pemanen dengan Ripe...<br>
                    <div class="loading-details">
                        <p><i class="fas fa-database me-2"></i>Database: <span id="loadingDbType">Remote Database (10.0.0.2,1888)</span></p>
                        <p><i class="fas fa-table me-2"></i>Tabel: <span id="loadingTable">Multiple Tables</span></p>
                    </div>
                `);
                
                $('#refreshBtn').prop('disabled', true);
                
                try {
                    const response = await fetch('/api/refresh/ffbworker');
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server error: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Completely destroy and remove the DataTable
                        if ($.fn.DataTable.isDataTable('#ffbworkerTable')) {
                            $('#ffbworkerTable').DataTable().destroy();
                        }
                        
                        // Clear the table body completely
                        $('#ffbworkerTable tbody').empty();
                        
                        // Manually construct the HTML for each row
                        if (result.data && result.data.length > 0) {
                            result.data.forEach(row => {
                                const rowElement = $('<tr class="warning-row"></tr>');
                                
                                // Add each cell in the exact same order as the header
                                rowElement.append(`<td>${row.ID || ''}</td>`);
                                rowElement.append(`<td>${row.TRANSNO || ''}</td>`);
                                rowElement.append(`<td>${row.FROMOCCODE || ''}</td>`);
                                rowElement.append(`<td>${row.TOOCCODE || ''}</td>`);
                                rowElement.append(`<td>${row.WORKERCODE || ''}</td>`);
                                rowElement.append(`<td>${row.FIELDNO || ''}</td>`);
                                rowElement.append(`<td>${row.LOOSEFRUIT || 0}</td>`);
                                rowElement.append(`<td>${row.RIPE || 0}</td>`);
                                rowElement.append(`<td>${row.UNRIPE || 0}</td>`);
                                rowElement.append(`<td>${row.OVERRIPE || 0}</td>`);
                                rowElement.append(`<td>${row.TRANSDATE ? new Date(row.TRANSDATE).toLocaleDateString() : '-'}</td>`);
                                rowElement.append(`<td>${row.TRANSSTATUS || ''}</td>`);
                                rowElement.append(`<td>${row.EmployeeStatus || ''}</td>`);
                                rowElement.append(`<td>${row.PosCode || ''}</td>`);
                                rowElement.append(`<td>${row.JumlahKemunculan || 0}</td>`);
                                
                                // Append the complete row to the table body
                                $('#ffbworkerTable tbody').append(rowElement);
                            });
                        } else {
                            // Add a single row with colspan matching the exact header column count
                            $('#ffbworkerTable tbody').append('<tr><td colspan="15" class="text-center">Tidak ada data pekerja non-pemanen dengan Ripe</td></tr>');
                        }
                        
                        // Initialize DataTable after HTML is completely ready
                        $('#ffbworkerTable').DataTable({
                            responsive: true,
                            dom: 'Bfrtip',
                            buttons: [
                                'copy', 'csv', 'excel', 'pdf', 'print'
                            ],
                            language: {
                                search: "Cari:",
                                lengthMenu: "Tampilkan _MENU_ data",
                                info: "Menampilkan _START_ sampai _END_ dari _TOTAL_ data",
                                infoEmpty: "Menampilkan 0 sampai 0 dari 0 data",
                                infoFiltered: "(disaring dari _MAX_ total data)",
                                zeroRecords: "Tidak ada data yang cocok",
                                paginate: {
                                    first: "Pertama",
                                    last: "Terakhir",
                                    next: "Selanjutnya",
                                    previous: "Sebelumnya"
                                }
                            }
                        });
                        
                        // Update FFB Worker statistics
                        $('#totalFfbworkerData').text(result.data ? result.data.length : 0);
                        $('#ffbworkerDivisi').text(result.divisiCount || 0);
                        $('#actionNeededFfbworker').text(result.data ? result.data.length : 0);
                        
                        // Update chart data
                        updateDataChart();
                        
                        showToast('Sukses', 'Data pekerja non-pemanen dengan Ripe berhasil diperbarui', 'success');
                        
                        // Update last check time
                        $('#lastCheckTime').text(new Date().toLocaleString());
                        $('#lastCheckTimeFooter').text(new Date().toLocaleString());
                        
                        hideLoading();
                    } else {
                        throw new Error(result.error || 'Gagal memperbarui data pekerja non-pemanen dengan Ripe');
                    }
                } catch (error) {
                    console.error('Error refreshing FFB Worker data:', error);
                    showToast('Error', 'Gagal memperbarui data pekerja non-pemanen: ' + error.message, 'danger');
                    showConnectionError(error.message);
                } finally {
                    $('#refreshBtn').prop('disabled', false);
                }
            }

            // Fungsi untuk memperbarui grafik data
            function updateDataChart() {
                // Pastikan Chart.js sudah dimuat
                if (typeof Chart === 'undefined') {
                    console.warn('Chart.js belum dimuat, menunggu...');
                    setTimeout(updateDataChart, 1000);
                    return;
                }

                try {
                    // Ambil data dari elemen yang ada
                    const tunjanganCount = parseInt($('#totalData').text()) || 0;
                    const bpjsCount = parseInt($('#totalBpjsData').text()) || 0;
                    const gwscannerCount = parseInt($('#totalGwscannerData').text()) || 0;
                    const ffbworkerCount = parseInt($('#totalFfbworkerData').text()) || 0;
                    
                    // Ambil elemen canvas grafik
                    const ctx = document.getElementById('dataChangeChart');
                    if (!ctx) {
                        console.error('Elemen canvas #dataChangeChart tidak ditemukan');
                        return;
                    }
                    
                    // Hancurkan grafik yang ada jika sudah ada
                    if (window.dataChart instanceof Chart) {
                        window.dataChart.destroy();
                    }
                    
                    // Buat grafik baru
                    window.dataChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ['Tunjangan Beras', 'BPJS', 'Duplikat GWScanner', 'Non-Pemanen dengan Ripe'],
                            datasets: [{
                                label: 'Jumlah Data',
                                data: [tunjanganCount, bpjsCount, gwscannerCount, ffbworkerCount],
                                backgroundColor: [
                                    'rgba(33, 150, 243, 0.7)',
                                    'rgba(255, 167, 38, 0.7)',
                                    'rgba(239, 83, 80, 0.7)',
                                    'rgba(102, 187, 106, 0.7)'
                                ],
                                borderColor: [
                                    'rgba(33, 150, 243, 1)',
                                    'rgba(255, 167, 38, 1)',
                                    'rgba(239, 83, 80, 1)',
                                    'rgba(102, 187, 106, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Jumlah Data'
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Jenis Data'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return context.dataset.label + ': ' + context.parsed.y;
                                        }
                                    }
                                }
                            }
                        }
                    });
                } catch (error) {
                    console.error('Error updating data chart:', error);
                }
            }

            // Fungsi untuk memuat dan memperbarui data history
            function loadHistoryDataAndUpdateTimeline() {
                $.ajax({
                    url: '/api/history-data',
                    method: 'GET',
                    success: function(response) {
                        if (response.success && response.data) {
                            const timeRange = $('#historyTimeRange').val();
                            const now = new Date();
                            let startDate;
                            
                            // Menentukan rentang waktu berdasarkan pilihan
                            switch(timeRange) {
                                case '24h':
                                    startDate = new Date(now - 24 * 60 * 60 * 1000);
                                    break;
                                case '3d':
                                    startDate = new Date(now - 3 * 24 * 60 * 60 * 1000);
                                    break;
                                case '7d':
                                    startDate = new Date(now - 7 * 24 * 60 * 60 * 1000);
                                    break;
                                case '30d':
                                    startDate = new Date(now - 30 * 24 * 60 * 60 * 1000);
                                    break;
                                default:
                                    startDate = new Date(0); // Semua data
                            }

                            // Filter data berdasarkan rentang waktu
                            const filteredData = {};
                            if (response.data && typeof response.data === 'object') {
                                Object.keys(response.data).forEach(type => {
                                    if (Array.isArray(response.data[type])) {
                                        filteredData[type] = response.data[type].filter(item => {
                                            const itemDate = new Date(item.timestamp);
                                            return itemDate >= startDate && itemDate <= now;
                                        });
                                    }
                                });
                            }

                            // Update grafik timeline
                            if (typeof updateTimelineChart === 'function') {
                                updateTimelineChart(filteredData);
                            }

                            // Periksa perubahan data dan tampilkan notifikasi jika ada peningkatan
                            if (typeof checkDataChangesAndNotify === 'function') {
                                checkDataChangesAndNotify(filteredData);
                            }
                        } else {
                            console.warn('Response tidak valid atau tidak memiliki data:', response);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error loading history data:', error);
                        showErrorMessage('Gagal memuat data history: ' + error);
                    }
                });
            }

            // Fungsi untuk memperbarui grafik timeline
            function updateTimelineChart(data) {
                // Implementasi update grafik timeline di sini
                // Gunakan library grafik yang sesuai (misalnya Chart.js)
            }

            // Fungsi untuk memeriksa perubahan data dan menampilkan notifikasi
            function checkDataChangesAndNotify(currentData) {
                const previousData = window.previousHistoryData || {};
                
                Object.keys(currentData).forEach(type => {
                    const current = currentData[type];
                    const previous = previousData[type] || [];
                    
                    if (current.length > 0 && previous.length > 0) {
                        const latestCurrent = current[current.length - 1];
                        const latestPrevious = previous[previous.length - 1];
                        
                        if (latestCurrent.value > latestPrevious.value) {
                            showNotification(`Data ${type} telah meningkat dari ${latestPrevious.value} menjadi ${latestCurrent.value}`);
                        }
                    }
                });
                
                // Simpan data saat ini untuk perbandingan berikutnya
                window.previousHistoryData = JSON.parse(JSON.stringify(currentData));
            }

            // Fungsi untuk menampilkan notifikasi
            function showNotification(message) {
                if ("Notification" in window) {
                    Notification.requestPermission().then(function(permission) {
                        if (permission === "granted") {
                            new Notification("Update Data", { body: message });
                        }
                    });
                }
                
                // Tampilkan juga di UI
                const toast = $('<div class="toast" role="alert" aria-live="assertive" aria-atomic="true">')
                    .append($('<div class="toast-header">')
                        .append('<strong class="mr-auto">Notifikasi</strong>')
                        .append('<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close"><span aria-hidden="true">&times;</span></button>'))
                    .append($('<div class="toast-body">').text(message));
                
                $('.toast-container').append(toast);
                toast.toast({ autohide: true, delay: 5000 }).toast('show');
            }

            // Muat data history saat halaman dimuat
            loadHistoryDataAndUpdateTimeline();

            // Set interval untuk memuat data setiap 5 menit
            setInterval(loadHistoryDataAndUpdateTimeline, 5 * 60 * 1000);

            // Event handler untuk mengubah range waktu
            $('#historyTimeRange').change(function() {
                if (typeof loadHistoryDataAndUpdateTimeline === 'function') {
                    loadHistoryDataAndUpdateTimeline();
                }
            });

            // Event handler untuk tombol muat history
            $('#loadHistoryBtn').click(function() {
                if (typeof loadHistoryDataAndUpdateTimeline === 'function') {
                    loadHistoryDataAndUpdateTimeline();
                }
            });
        });
    </script>
</body>
</html> 